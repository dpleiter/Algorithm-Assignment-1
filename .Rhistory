stat_summary(geom = "line", fun.y = mean) +
stat_summary(geom = "point", fun.y = mean) +
geom_smooth(method = 'lm', formula = y ~ x) +
ggtitle("Enqueue Time") +
ylab("Enqueue Time (Seconds)") +
xlab("After X Input") +
theme(axis.text.x = element_text(angle = 45, hjust = 1), plot.title = element_text(size=15))
array_dq <- ggplot(data = subset(df, DataStructure == 'Array' & Operation == 'Dequeue'), aes(x=Block, y = Time)) +
stat_summary(geom = "line", fun.y = mean) +
stat_summary(geom = "point", fun.y = mean) +
geom_smooth(method = 'lm', formula = y ~ x) +
ggtitle("Dequeue Time") +
ylab("Dequeue Time (Seconds)") +
xlab("After X Input") +
theme(axis.text.x = element_text(angle = 45, hjust = 1), plot.title = element_text(size=15))
array_pt <- ggplot(subset(df, DataStructure == 'Array' & Operation == 'PT'), aes(x = Block, y = PtNormTime)) +
stat_summary(geom = "line", fun.y = mean) +
stat_summary(geom = "point", fun.y = mean) +
geom_smooth(method = 'lm', formula = y ~ x) +
ggtitle("Pt Time by Input Size") +
ylab("Pt Time (Seconds)") +
xlab("Input Size") +
theme(axis.text.x = element_text(angle = 45, hjust = 1), plot.title = element_text(size=15))
grid.arrange(array_eq, array_dq, array_pt, ncol=2, nrow=2)
list_eq <- ggplot(data = subset(df, DataStructure == 'LinkedList' & Operation == 'Enqueue'), aes(x=Block, y = Time)) +
stat_summary(geom = "line", fun.y = mean) +
stat_summary(geom = "point", fun.y = mean) +
geom_smooth(method = 'lm', formula = y ~ x) +
ggtitle("Enqueue Time") +
ylab("Enqueue Time (Seconds)") +
xlab("After X Input") +
theme(axis.text.x = element_text(angle = 90, hjust = 1), plot.title = element_text(size=15))
list_dq <- ggplot(data = subset(df, DataStructure == 'LinkedList' & Operation == 'Dequeue'), aes(x=Block, y = Time)) +
stat_summary(geom = "line", fun.y = mean) +
stat_summary(geom = "point", fun.y = mean) +
geom_smooth(method = 'lm', formula = y ~ x) +
ggtitle("Dequeue Time") +
ylab("Dequeue Time (Seconds)") +
xlab("After X Input") +
theme(axis.text.x = element_text(angle = 90, hjust = 1), plot.title = element_text(size=15))
list_pt <- ggplot(subset(df, DataStructure == 'LinkedList' & Operation == 'PT'), aes(x = Block, y = PtNormTime)) +
stat_summary(geom = "line", fun.y = mean) +
stat_summary(geom = "point", fun.y = mean) +
geom_smooth(method = 'lm', formula = y ~ x) +
ggtitle("Pt Time by Input Size") +
ylab("Pt Time (Seconds)") +
xlab("Input Size") +
theme(axis.text.x = element_text(angle = 90, hjust = 1), plot.title = element_text(size=15))
grid.arrange(list_eq, list_dq, list_pt, ncol=2, nrow=2)
#setwd("/home/oli/Desktop/Github/Algorithms & Analysis/Algorithm-Assignment-1/in/")
setwd("C:\\Users\\olive\\Desktop\\GitHub\\Algorithms-Analysis\\Algorithm-Assignment-1\\in")
df <- read.csv("dillon_results.csv", col.names = c('DataStructure', 'Operation', 'Iteration', 'Block', 'Time'))
head(df)
df_grouped <- df %>% group_by(DataStructure, SampleSize)
df$PtNormTime <- df$Time / df$Block
library(ggplot2)
tree_eq <- ggplot(data = subset(df, DataStructure == 'Tree' & Operation == 'Enqueue'), aes(x=Block, y = Time)) +
stat_summary(geom = "line", fun.y = mean) +
stat_summary(geom = "point", fun.y = mean) +
geom_smooth(method = 'lm', formula = y ~ x) +
ggtitle("Enqueue Time") +
ylab("Enqueue Time (Seconds)") +
xlab("After X Input") +
theme(axis.text.x = element_text(angle = 45, hjust = 1), plot.title = element_text(size=15))
tree_dq <- ggplot(data = subset(df, DataStructure == 'Tree' & Operation == 'Dequeue'), aes(x=Block, y = Time)) +
stat_summary(geom = "line", fun.y = mean) +
stat_summary(geom = "point", fun.y = mean) +
geom_smooth(method = 'lm', formula = y ~ x) +
ggtitle("Dequeue Time") +
ylab("Dequeue Time (Seconds)") +
xlab("After X Input (thousands '000)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1), plot.title = element_text(size=15))
tree_pt <- ggplot(subset(df, DataStructure == 'Tree' & Operation == 'PT'), aes(x = Block, y = PtNormTime)) +
stat_summary(geom = "line", fun.y = mean) +
stat_summary(geom = "point", fun.y = mean) +
geom_smooth(method = 'lm', formula = y ~ x) +
ggtitle("Pt Time by Input Size") +
ylab("Pt Time (Seconds)") +
xlab("Input Size") +
theme(axis.text.x = element_text(angle = 45, hjust = 1), plot.title = element_text(size=15))
library(gridExtra)
grid.arrange(tree_eq, tree_dq, tree_pt, ncol=2, nrow=2)
array_eq <- ggplot(data = subset(df, DataStructure == 'Array' & Operation == 'Enqueue'), aes(x=Block, y = Time)) +
stat_summary(geom = "line", fun.y = mean) +
stat_summary(geom = "point", fun.y = mean) +
geom_smooth(method = 'lm', formula = y ~ x) +
ggtitle("Enqueue Time") +
ylab("Enqueue Time (Seconds)") +
xlab("After X Input") +
theme(axis.text.x = element_text(angle = 45, hjust = 1), plot.title = element_text(size=15))
array_dq <- ggplot(data = subset(df, DataStructure == 'Array' & Operation == 'Dequeue'), aes(x=Block, y = Time)) +
stat_summary(geom = "line", fun.y = mean) +
stat_summary(geom = "point", fun.y = mean) +
geom_smooth(method = 'lm', formula = y ~ x) +
ggtitle("Dequeue Time") +
ylab("Dequeue Time (Seconds)") +
xlab("After X Input") +
theme(axis.text.x = element_text(angle = 45, hjust = 1), plot.title = element_text(size=15))
array_pt <- ggplot(subset(df, DataStructure == 'Array' & Operation == 'PT'), aes(x = Block, y = PtNormTime)) +
stat_summary(geom = "line", fun.y = mean) +
stat_summary(geom = "point", fun.y = mean) +
geom_smooth(method = 'lm', formula = y ~ x) +
ggtitle("Pt Time by Input Size") +
ylab("Pt Time (Seconds)") +
xlab("Input Size") +
theme(axis.text.x = element_text(angle = 45, hjust = 1), plot.title = element_text(size=15))
grid.arrange(array_eq, array_dq, array_pt, ncol=2, nrow=2)
list_eq <- ggplot(data = subset(df, DataStructure == 'LinkedList' & Operation == 'Enqueue'), aes(x=Block, y = Time)) +
stat_summary(geom = "line", fun.y = mean) +
stat_summary(geom = "point", fun.y = mean) +
geom_smooth(method = 'lm', formula = y ~ x) +
ggtitle("Enqueue Time") +
ylab("Enqueue Time (Seconds)") +
xlab("After X Input") +
theme(axis.text.x = element_text(angle = 45, hjust = 1), plot.title = element_text(size=15))
list_dq <- ggplot(data = subset(df, DataStructure == 'LinkedList' & Operation == 'Dequeue'), aes(x=Block, y = Time)) +
stat_summary(geom = "line", fun.y = mean) +
stat_summary(geom = "point", fun.y = mean) +
geom_smooth(method = 'lm', formula = y ~ x) +
ggtitle("Dequeue Time") +
ylab("Dequeue Time (Seconds)") +
xlab("After X Input") +
theme(axis.text.x = element_text(angle = 45, hjust = 1), plot.title = element_text(size=15))
list_pt <- ggplot(subset(df, DataStructure == 'LinkedList' & Operation == 'PT'), aes(x = Block, y = PtNormTime)) +
stat_summary(geom = "line", fun.y = mean) +
stat_summary(geom = "point", fun.y = mean) +
geom_smooth(method = 'lm', formula = y ~ x) +
ggtitle("Pt Time by Input Size") +
ylab("Pt Time (Seconds)") +
xlab("Input Size") +
theme(axis.text.x = element_text(angle = 45, hjust = 1), plot.title = element_text(size=15))
grid.arrange(list_eq, list_dq, list_pt, ncol=2, nrow=2)
#setwd("/home/oli/Desktop/Github/Algorithms & Analysis/Algorithm-Assignment-1/in/")
setwd("C:\\Users\\olive\\Desktop\\GitHub\\Algorithms-Analysis\\Algorithm-Assignment-1\\in")
df <- read.csv("dillon_results.csv", col.names = c('DataStructure', 'Operation', 'Iteration', 'Block', 'Time'))
head(df)
df$PtNormTime <- df$Time / df$Block
library(ggplot2)
tree_eq <- ggplot(data = subset(df, DataStructure == 'Tree' & Operation == 'Enqueue'), aes(x=Block, y = Time)) +
stat_summary(geom = "line", fun.y = mean) +
stat_summary(geom = "point", fun.y = mean) +
geom_smooth(method = 'lm', formula = y ~ x) +
ggtitle("Enqueue Time") +
ylab("Enqueue Time (Seconds)") +
xlab("After X Input") +
theme(axis.text.x = element_text(angle = 45, hjust = 1), plot.title = element_text(size=15))
tree_dq <- ggplot(data = subset(df, DataStructure == 'Tree' & Operation == 'Dequeue'), aes(x=Block, y = Time)) +
stat_summary(geom = "line", fun.y = mean) +
stat_summary(geom = "point", fun.y = mean) +
geom_smooth(method = 'lm', formula = y ~ x) +
ggtitle("Dequeue Time") +
ylab("Dequeue Time (Seconds)") +
xlab("After X Input (thousands '000)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1), plot.title = element_text(size=15))
tree_pt <- ggplot(subset(df, DataStructure == 'Tree' & Operation == 'PT'), aes(x = Block, y = PtNormTime)) +
stat_summary(geom = "line", fun.y = mean) +
stat_summary(geom = "point", fun.y = mean) +
geom_smooth(method = 'lm', formula = y ~ x) +
ggtitle("Pt Time by Input Size") +
ylab("Pt Time (Seconds)") +
xlab("Input Size") +
theme(axis.text.x = element_text(angle = 45, hjust = 1), plot.title = element_text(size=15))
library(gridExtra)
grid.arrange(tree_eq, tree_dq, tree_pt, ncol=2, nrow=2)
array_eq <- ggplot(data = subset(df, DataStructure == 'Array' & Operation == 'Enqueue'), aes(x=Block, y = Time)) +
stat_summary(geom = "line", fun.y = mean) +
stat_summary(geom = "point", fun.y = mean) +
geom_smooth(method = 'lm', formula = y ~ x) +
ggtitle("Enqueue Time") +
ylab("Enqueue Time (Seconds)") +
xlab("After X Input") +
theme(axis.text.x = element_text(angle = 45, hjust = 1), plot.title = element_text(size=15))
array_dq <- ggplot(data = subset(df, DataStructure == 'Array' & Operation == 'Dequeue'), aes(x=Block, y = Time)) +
stat_summary(geom = "line", fun.y = mean) +
stat_summary(geom = "point", fun.y = mean) +
geom_smooth(method = 'lm', formula = y ~ x) +
ggtitle("Dequeue Time") +
ylab("Dequeue Time (Seconds)") +
xlab("After X Input") +
theme(axis.text.x = element_text(angle = 45, hjust = 1), plot.title = element_text(size=15))
array_pt <- ggplot(subset(df, DataStructure == 'Array' & Operation == 'PT'), aes(x = Block, y = PtNormTime)) +
stat_summary(geom = "line", fun.y = mean) +
stat_summary(geom = "point", fun.y = mean) +
geom_smooth(method = 'lm', formula = y ~ x) +
ggtitle("Pt Time by Input Size") +
ylab("Pt Time (Seconds)") +
xlab("Input Size") +
theme(axis.text.x = element_text(angle = 45, hjust = 1), plot.title = element_text(size=15))
grid.arrange(array_eq, array_dq, array_pt, ncol=2, nrow=2)
list_eq <- ggplot(data = subset(df, DataStructure == 'LinkedList' & Operation == 'Enqueue'), aes(x=Block, y = Time)) +
stat_summary(geom = "line", fun.y = mean) +
stat_summary(geom = "point", fun.y = mean) +
geom_smooth(method = 'lm', formula = y ~ x) +
ggtitle("Enqueue Time") +
ylab("Enqueue Time (Seconds)") +
xlab("After X Input") +
theme(axis.text.x = element_text(angle = 45, hjust = 1), plot.title = element_text(size=15))
list_dq <- ggplot(data = subset(df, DataStructure == 'LinkedList' & Operation == 'Dequeue'), aes(x=Block, y = Time)) +
stat_summary(geom = "line", fun.y = mean) +
stat_summary(geom = "point", fun.y = mean) +
geom_smooth(method = 'lm', formula = y ~ x) +
ggtitle("Dequeue Time") +
ylab("Dequeue Time (Seconds)") +
xlab("After X Input") +
theme(axis.text.x = element_text(angle = 45, hjust = 1), plot.title = element_text(size=15))
list_pt <- ggplot(subset(df, DataStructure == 'LinkedList' & Operation == 'PT'), aes(x = Block, y = PtNormTime)) +
stat_summary(geom = "line", fun.y = mean) +
stat_summary(geom = "point", fun.y = mean) +
geom_smooth(method = 'lm', formula = y ~ x) +
ggtitle("Pt Time by Input Size") +
ylab("Pt Time (Seconds)") +
xlab("Input Size") +
theme(axis.text.x = element_text(angle = 45, hjust = 1), plot.title = element_text(size=15))
grid.arrange(list_eq, list_dq, list_pt, ncol=2, nrow=2)
#setwd("/home/oli/Desktop/Github/Algorithms & Analysis/Algorithm-Assignment-1/in/")
setwd("C:\\Users\\olive\\Desktop\\GitHub\\Algorithms-Analysis\\Algorithm-Assignment-1\\in")
df <- read.csv("dillon_results.csv", col.names = c('DataStructure', 'Operation', 'Iteration', 'Block', 'Time'))
head(df)
df$PtNormTime <- df$Time / df$Block
library(ggplot2)
tree_eq <- ggplot(data = subset(df, DataStructure == 'Tree' & Operation == 'Enqueue'), aes(x=Block, y = Time)) +
stat_summary(geom = "line", fun.y = mean) +
stat_summary(geom = "point", fun.y = mean) +
geom_smooth(method = 'lm', formula = y ~ x) +
ggtitle("Enqueue Time") +
ylab("Enqueue Time (Seconds)") +
xlab("After X Input") +
theme(axis.text.x = element_text(angle = 45, hjust = 1), plot.title = element_text(size=15))
tree_dq <- ggplot(data = subset(df, DataStructure == 'Tree' & Operation == 'Dequeue'), aes(x=Block, y = Time)) +
stat_summary(geom = "line", fun.y = mean) +
stat_summary(geom = "point", fun.y = mean) +
geom_smooth(method = 'lm', formula = y ~ x) +
ggtitle("Dequeue Time") +
ylab("Dequeue Time (Seconds)") +
xlab("After X Input (thousands '000)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1), plot.title = element_text(size=15))
tree_pt <- ggplot(subset(df, DataStructure == 'Tree' & Operation == 'PT'), aes(x = Block, y = PtNormTime)) +
stat_summary(geom = "line", fun.y = mean) +
stat_summary(geom = "point", fun.y = mean) +
geom_smooth(method = 'lm', formula = y ~ x) +
ggtitle("Pt Time by Input Size") +
ylab("Pt Time (Seconds)") +
xlab("Input Size") +
theme(axis.text.x = element_text(angle = 45, hjust = 1), plot.title = element_text(size=15))
library(gridExtra)
grid.arrange(tree_eq, tree_dq, tree_pt, ncol=2, nrow=2)
array_eq <- ggplot(data = subset(df, DataStructure == 'Array' & Operation == 'Enqueue'), aes(x=Block, y = Time)) +
stat_summary(geom = "line", fun.y = mean) +
stat_summary(geom = "point", fun.y = mean) +
geom_smooth(method = 'lm', formula = y ~ x) +
ggtitle("Enqueue Time") +
ylab("Enqueue Time (Seconds)") +
xlab("After X Input") +
theme(axis.text.x = element_text(angle = 45, hjust = 1), plot.title = element_text(size=15))
array_dq <- ggplot(data = subset(df, DataStructure == 'Array' & Operation == 'Dequeue'), aes(x=Block, y = Time)) +
stat_summary(geom = "line", fun.y = mean) +
stat_summary(geom = "point", fun.y = mean) +
geom_smooth(method = 'lm', formula = y ~ x) +
ggtitle("Dequeue Time") +
ylab("Dequeue Time (Seconds)") +
xlab("After X Input") +
theme(axis.text.x = element_text(angle = 45, hjust = 1), plot.title = element_text(size=15))
array_pt <- ggplot(subset(df, DataStructure == 'Array' & Operation == 'PT'), aes(x = Block, y = PtNormTime)) +
stat_summary(geom = "line", fun.y = mean) +
stat_summary(geom = "point", fun.y = mean) +
geom_smooth(method = 'lm', formula = y ~ x) +
ggtitle("Pt Time by Input Size") +
ylab("Pt Time (Seconds)") +
xlab("Input Size") +
theme(axis.text.x = element_text(angle = 45, hjust = 1), plot.title = element_text(size=15))
grid.arrange(array_eq, array_dq, array_pt, ncol=2, nrow=2)
#setwd("/home/oli/Desktop/Github/Algorithms & Analysis/Algorithm-Assignment-1/in/")
setwd("C:\\Users\\olive\\Desktop\\GitHub\\Algorithms-Analysis\\Algorithm-Assignment-1\\in")
df <- read.csv("dillon_results.csv", col.names = c('DataStructure', 'Operation', 'Iteration', 'Block', 'Time'))
head(df)
df$PtNormTime <- df$Time / df$Block
library(ggplot2)
tree_eq <- ggplot(data = subset(df, DataStructure == 'Tree' & Operation == 'Enqueue'), aes(x=Block, y = Time)) +
stat_summary(geom = "line", fun.y = mean) +
stat_summary(geom = "point", fun.y = mean) +
geom_smooth(method = 'lm', formula = y ~ x) +
ggtitle("Enqueue Time") +
ylab("Enqueue Time (Seconds)") +
xlab("After X Input") +
theme(axis.text.x = element_text(angle = 45, hjust = 1), plot.title = element_text(size=15))
tree_dq <- ggplot(data = subset(df, DataStructure == 'Tree' & Operation == 'Dequeue'), aes(x=Block, y = Time)) +
stat_summary(geom = "line", fun.y = mean) +
stat_summary(geom = "point", fun.y = mean) +
geom_smooth(method = 'lm', formula = y ~ x) +
ggtitle("Dequeue Time") +
ylab("Dequeue Time (Seconds)") +
xlab("After X Input (thousands '000)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1), plot.title = element_text(size=15))
tree_pt <- ggplot(subset(df, DataStructure == 'Tree' & Operation == 'PT'), aes(x = Block, y = PtNormTime)) +
stat_summary(geom = "line", fun.y = mean) +
stat_summary(geom = "point", fun.y = mean) +
geom_smooth(method = 'lm', formula = y ~ x) +
ggtitle("Pt Time by Input Size") +
ylab("Pt Time (Seconds)") +
xlab("Input Size") +
theme(axis.text.x = element_text(angle = 45, hjust = 1), plot.title = element_text(size=15))
library(gridExtra)
grid.arrange(tree_eq, tree_dq, tree_pt, ncol=2, nrow=2)
array_eq <- ggplot(data = subset(df, DataStructure == 'Array' & Operation == 'Enqueue'), aes(x=Block, y = Time)) +
stat_summary(geom = "line", fun.y = mean) +
stat_summary(geom = "point", fun.y = mean) +
geom_smooth(method = 'lm', formula = y ~ x) +
ggtitle("Enqueue Time") +
ylab("Enqueue Time (Seconds)") +
xlab("After X Input") +
theme(axis.text.x = element_text(angle = 45, hjust = 1), plot.title = element_text(size=15))
array_dq <- ggplot(data = subset(df, DataStructure == 'Array' & Operation == 'Dequeue'), aes(x=Block, y = Time)) +
stat_summary(geom = "line", fun.y = mean) +
stat_summary(geom = "point", fun.y = mean) +
geom_smooth(method = 'lm', formula = y ~ x) +
ggtitle("Dequeue Time") +
ylab("Dequeue Time (Seconds)") +
xlab("After X Input") +
theme(axis.text.x = element_text(angle = 45, hjust = 1), plot.title = element_text(size=15))
array_pt <- ggplot(subset(df, DataStructure == 'Array' & Operation == 'PT'), aes(x = Block, y = PtNormTime)) +
stat_summary(geom = "line", fun.y = mean) +
stat_summary(geom = "point", fun.y = mean) +
geom_smooth(method = 'lm', formula = y ~ x) +
ggtitle("Pt Time by Input Size") +
ylab("Pt Time (Seconds)") +
xlab("Input Size") +
theme(axis.text.x = element_text(angle = 45, hjust = 1), plot.title = element_text(size=15))
grid.arrange(array_eq, array_dq, array_pt, ncol=2, nrow=2)
list_eq <- ggplot(data = subset(df, DataStructure == 'LinkedList' & Operation == 'Enqueue'), aes(x=Block, y = Time)) +
stat_summary(geom = "line", fun.y = mean) +
stat_summary(geom = "point", fun.y = mean) +
geom_smooth(method = 'lm', formula = y ~ x) +
ggtitle("Enqueue Time") +
ylab("Enqueue Time (Seconds)") +
xlab("After X Input") +
theme(axis.text.x = element_text(angle = 45, hjust = 1), plot.title = element_text(size=15))
list_dq <- ggplot(data = subset(df, DataStructure == 'LinkedList' & Operation == 'Dequeue'), aes(x=Block, y = Time)) +
stat_summary(geom = "line", fun.y = mean) +
stat_summary(geom = "point", fun.y = mean) +
geom_smooth(method = 'lm', formula = y ~ x) +
ggtitle("Dequeue Time") +
ylab("Dequeue Time (Seconds)") +
xlab("After X Input") +
theme(axis.text.x = element_text(angle = 45, hjust = 1), plot.title = element_text(size=15))
list_pt <- ggplot(subset(df, DataStructure == 'LinkedList' & Operation == 'PT'), aes(x = Block, y = PtNormTime)) +
stat_summary(geom = "line", fun.y = mean) +
stat_summary(geom = "point", fun.y = mean) +
geom_smooth(method = 'lm', formula = y ~ x) +
ggtitle("Pt Time by Input Size") +
ylab("Pt Time (Seconds)") +
xlab("Input Size") +
theme(axis.text.x = element_text(angle = 45, hjust = 1), plot.title = element_text(size=15))
grid.arrange(list_eq, list_dq, list_pt, ncol=2, nrow=2)
#setwd("/home/oli/Desktop/Github/Algorithms & Analysis/Algorithm-Assignment-1/in/")
setwd("C:\\Users\\olive\\Desktop\\GitHub\\Algorithms-Analysis\\Algorithm-Assignment-1\\in")
df <- read.csv("dillon_results.csv", col.names = c('DataStructure', 'Operation', 'Iteration', 'Block', 'Time'))
head(df)
df$PtNormTime <- df$Time / df$Block
library(ggplot2)
tree_eq <- ggplot(data = subset(df, DataStructure == 'Tree' & Operation == 'Enqueue'), aes(x=Block, y = Time)) +
stat_summary(geom = "line", fun.y = mean) +
stat_summary(geom = "point", fun.y = mean) +
geom_smooth(method = 'lm', formula = y ~ x) +
ggtitle("Enqueue Time") +
ylab("Enqueue Time (Seconds)") +
xlab("After X Input") +
theme(axis.text.x = element_text(angle = 45, hjust = 1), plot.title = element_text(size=15))
tree_dq <- ggplot(data = subset(df, DataStructure == 'Tree' & Operation == 'Dequeue'), aes(x=Block, y = Time)) +
stat_summary(geom = "line", fun.y = mean) +
stat_summary(geom = "point", fun.y = mean) +
geom_smooth(method = 'lm', formula = y ~ x) +
ggtitle("Dequeue Time") +
ylab("Dequeue Time (Seconds)") +
xlab("After X Input (thousands '000)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1), plot.title = element_text(size=15))
tree_pt <- ggplot(subset(df, DataStructure == 'Tree' & Operation == 'PT'), aes(x = Block, y = PtNormTime)) +
stat_summary(geom = "line", fun.y = mean) +
stat_summary(geom = "point", fun.y = mean) +
geom_smooth(method = 'lm', formula = y ~ x) +
ggtitle("Pt Time by Input Size") +
ylab("Pt Time (Seconds)") +
xlab("Input Size") +
theme(axis.text.x = element_text(angle = 45, hjust = 1), plot.title = element_text(size=15))
library(gridExtra)
grid.arrange(tree_eq, tree_dq, tree_pt, ncol=2, nrow=2)
array_eq <- ggplot(data = subset(df, DataStructure == 'Array' & Operation == 'Enqueue'), aes(x=Block, y = Time)) +
stat_summary(geom = "line", fun.y = mean) +
stat_summary(geom = "point", fun.y = mean) +
geom_smooth(method = 'lm', formula = y ~ x) +
ggtitle("Enqueue Time") +
ylab("Enqueue Time (Seconds)") +
xlab("After X Input") +
theme(axis.text.x = element_text(angle = 45, hjust = 1), plot.title = element_text(size=15))
array_dq <- ggplot(data = subset(df, DataStructure == 'Array' & Operation == 'Dequeue'), aes(x=Block, y = Time)) +
stat_summary(geom = "line", fun.y = mean) +
stat_summary(geom = "point", fun.y = mean) +
geom_smooth(method = 'lm', formula = y ~ x) +
ggtitle("Dequeue Time") +
ylab("Dequeue Time (Seconds)") +
xlab("After X Input") +
theme(axis.text.x = element_text(angle = 45, hjust = 1), plot.title = element_text(size=15))
array_pt <- ggplot(subset(df, DataStructure == 'Array' & Operation == 'PT'), aes(x = Block, y = PtNormTime)) +
stat_summary(geom = "line", fun.y = mean) +
stat_summary(geom = "point", fun.y = mean) +
geom_smooth(method = 'lm', formula = y ~ x) +
ggtitle("Pt Time by Input Size") +
ylab("Pt Time (Seconds)") +
xlab("Input Size") +
theme(axis.text.x = element_text(angle = 45, hjust = 1), plot.title = element_text(size=15))
grid.arrange(array_eq, array_dq, array_pt, ncol=2, nrow=2)
list_eq <- ggplot(data = subset(df, DataStructure == 'LinkedList' & Operation == 'Enqueue'), aes(x=Block, y = Time)) +
stat_summary(geom = "line", fun.y = mean) +
stat_summary(geom = "point", fun.y = mean) +
geom_smooth(method = 'lm', formula = y ~ x) +
ggtitle("Enqueue Time") +
ylab("Enqueue Time (Seconds)") +
xlab("After X Input") +
theme(axis.text.x = element_text(angle = 45, hjust = 1), plot.title = element_text(size=15))
list_dq <- ggplot(data = subset(df, DataStructure == 'LinkedList' & Operation == 'Dequeue'), aes(x=Block, y = Time)) +
stat_summary(geom = "line", fun.y = mean) +
stat_summary(geom = "point", fun.y = mean) +
geom_smooth(method = 'lm', formula = y ~ x) +
ggtitle("Dequeue Time") +
ylab("Dequeue Time (Seconds)") +
xlab("After X Input") +
theme(axis.text.x = element_text(angle = 45, hjust = 1), plot.title = element_text(size=15))
list_pt <- ggplot(subset(df, DataStructure == 'LinkedList' & Operation == 'PT'), aes(x = Block, y = PtNormTime)) +
stat_summary(geom = "line", fun.y = mean) +
stat_summary(geom = "point", fun.y = mean) +
geom_smooth(method = 'lm', formula = y ~ x) +
ggtitle("Pt Time by Input Size") +
ylab("Pt Time (Seconds)") +
xlab("Input Size") +
theme(axis.text.x = element_text(angle = 45, hjust = 1), plot.title = element_text(size=15))
grid.arrange(list_eq, list_dq, list_pt, ncol=2, nrow=2)
library(ggplot2)
tree_eq <- ggplot(data = subset(df, DataStructure == 'Tree' & Operation == 'Enqueue'), aes(x=Block, y = Time)) +
stat_summary(geom = "line", fun.y = mean) +
stat_summary(geom = "point", fun.y = mean) +
geom_smooth(method = 'lm', formula = y ~ x) +
ggtitle("Enqueue Time") +
ylab("Enqueue Time (Seconds)") +
xlab("After Input (thousands '000)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1), plot.title = element_text(size=15))
tree_dq <- ggplot(data = subset(df, DataStructure == 'Tree' & Operation == 'Dequeue'), aes(x=Block, y = Time)) +
stat_summary(geom = "line", fun.y = mean) +
stat_summary(geom = "point", fun.y = mean) +
geom_smooth(method = 'lm', formula = y ~ x) +
ggtitle("Dequeue Time") +
ylab("Dequeue Time (Seconds)") +
xlab("After Input (thousands '000)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1), plot.title = element_text(size=15))
tree_pt <- ggplot(subset(df, DataStructure == 'Tree' & Operation == 'PT'), aes(x = Block, y = PtNormTime)) +
stat_summary(geom = "line", fun.y = mean) +
stat_summary(geom = "point", fun.y = mean) +
geom_smooth(method = 'lm', formula = y ~ x) +
ggtitle("Pt Time by Input Size") +
ylab("Pt Time (Seconds)") +
xlab("Input Size") +
theme(axis.text.x = element_text(angle = 45, hjust = 1), plot.title = element_text(size=15))
library(gridExtra)
grid.arrange(tree_eq, tree_dq, tree_pt, ncol=2, nrow=2)
array_eq <- ggplot(data = subset(df, DataStructure == 'Array' & Operation == 'Enqueue'), aes(x=Block, y = Time)) +
stat_summary(geom = "line", fun.y = mean) +
stat_summary(geom = "point", fun.y = mean) +
geom_smooth(method = 'lm', formula = y ~ x) +
ggtitle("Enqueue Time") +
ylab("Enqueue Time (Seconds)") +
xlab("After Input (thousands '000)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1), plot.title = element_text(size=15))
array_dq <- ggplot(data = subset(df, DataStructure == 'Array' & Operation == 'Dequeue'), aes(x=Block, y = Time)) +
stat_summary(geom = "line", fun.y = mean) +
stat_summary(geom = "point", fun.y = mean) +
geom_smooth(method = 'lm', formula = y ~ x) +
ggtitle("Dequeue Time") +
ylab("Dequeue Time (Seconds)") +
xlab("After Input (thousands '000)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1), plot.title = element_text(size=15))
array_pt <- ggplot(subset(df, DataStructure == 'Array' & Operation == 'PT'), aes(x = Block, y = PtNormTime)) +
stat_summary(geom = "line", fun.y = mean) +
stat_summary(geom = "point", fun.y = mean) +
geom_smooth(method = 'lm', formula = y ~ x) +
ggtitle("Pt Time by Input Size") +
ylab("Pt Time (Seconds)") +
xlab("Input Size") +
theme(axis.text.x = element_text(angle = 45, hjust = 1), plot.title = element_text(size=15))
grid.arrange(array_eq, array_dq, array_pt, ncol=2, nrow=2)
list_eq <- ggplot(data = subset(df, DataStructure == 'LinkedList' & Operation == 'Enqueue'), aes(x=Block, y = Time)) +
stat_summary(geom = "line", fun.y = mean) +
stat_summary(geom = "point", fun.y = mean) +
geom_smooth(method = 'lm', formula = y ~ x) +
ggtitle("Enqueue Time") +
ylab("Enqueue Time (Seconds)") +
xlab("After Input (thousands '000)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1), plot.title = element_text(size=15))
list_dq <- ggplot(data = subset(df, DataStructure == 'LinkedList' & Operation == 'Dequeue'), aes(x=Block, y = Time)) +
stat_summary(geom = "line", fun.y = mean) +
stat_summary(geom = "point", fun.y = mean) +
geom_smooth(method = 'lm', formula = y ~ x) +
ggtitle("Dequeue Time") +
ylab("Dequeue Time (Seconds)") +
xlab("After Input (thousands '000)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1), plot.title = element_text(size=15))
list_pt <- ggplot(subset(df, DataStructure == 'LinkedList' & Operation == 'PT'), aes(x = Block, y = PtNormTime)) +
stat_summary(geom = "line", fun.y = mean) +
stat_summary(geom = "point", fun.y = mean) +
geom_smooth(method = 'lm', formula = y ~ x) +
ggtitle("Pt Time by Input Size") +
ylab("Pt Time (Seconds)") +
xlab("Input Size") +
theme(axis.text.x = element_text(angle = 45, hjust = 1), plot.title = element_text(size=15))
grid.arrange(list_eq, list_dq, list_pt, ncol=2, nrow=2)
